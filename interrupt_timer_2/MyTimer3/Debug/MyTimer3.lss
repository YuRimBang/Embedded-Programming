
MyTimer3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000154  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000721  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063f  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000216  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037e  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  9e:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
const uint8_t pattern[] = {0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0x0e, 0x1c, 0x38, 0x70};

volatile uint8_t patternIndex = 0;
volatile int count = 0;

ISR(TIMER1_COMPA_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	count++;
  b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  c2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	TCNT1 = 0;
  c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <main>:

int main() {
	DDRD = 0xff;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  e0:	1b b8       	out	0x0b, r1	; 11

	TCCR1B = (1 << CS12) | (1 << CS10);
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 128;
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	TIMSK1 |= (1 << OCIE1A);
  f4:	ef e6       	ldi	r30, 0x6F	; 111
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	80 83       	st	Z, r24

	sei();
  fe:	78 94       	sei
	
	while(1)
	{
		if(count == 64)
 100:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 104:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 108:	80 34       	cpi	r24, 0x40	; 64
 10a:	91 05       	cpc	r25, r1
 10c:	c9 f7       	brne	.-14     	; 0x100 <main+0x24>
		{
			count = 0;
 10e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 112:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			patternIndex = (patternIndex) % sizeof(pattern);
 116:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <patternIndex>
 11a:	8d ec       	ldi	r24, 0xCD	; 205
 11c:	28 9f       	mul	r18, r24
 11e:	81 2d       	mov	r24, r1
 120:	11 24       	eor	r1, r1
 122:	86 95       	lsr	r24
 124:	86 95       	lsr	r24
 126:	86 95       	lsr	r24
 128:	88 0f       	add	r24, r24
 12a:	98 2f       	mov	r25, r24
 12c:	99 0f       	add	r25, r25
 12e:	99 0f       	add	r25, r25
 130:	89 0f       	add	r24, r25
 132:	28 1b       	sub	r18, r24
 134:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <patternIndex>
			PORTD = pattern[patternIndex++];
 138:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <patternIndex>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	8e 0f       	add	r24, r30
 140:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <patternIndex>
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	e0 50       	subi	r30, 0x00	; 0
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	80 81       	ld	r24, Z
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	d8 cf       	rjmp	.-80     	; 0x100 <main+0x24>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
