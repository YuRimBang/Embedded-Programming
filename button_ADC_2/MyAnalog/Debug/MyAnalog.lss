
MyAnalog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000783  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  0000099b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00001065  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015e  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  8e:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADC_INIT>:
}

void int_to_string(int n, char *buffer)
{
	sprintf(buffer, "%04d", n); buffer[4] = '\0';
}
  96:	ac e7       	ldi	r26, 0x7C	; 124
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	9c 91       	ld	r25, X
  9c:	90 64       	ori	r25, 0x40	; 64
  9e:	9c 93       	st	X, r25
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	97 60       	ori	r25, 0x07	; 7
  a8:	90 83       	st	Z, r25
  aa:	90 81       	ld	r25, Z
  ac:	90 68       	ori	r25, 0x80	; 128
  ae:	90 83       	st	Z, r25
  b0:	90 81       	ld	r25, Z
  b2:	90 62       	ori	r25, 0x20	; 32
  b4:	90 83       	st	Z, r25
  b6:	9c 91       	ld	r25, X
  b8:	2c 91       	ld	r18, X
  ba:	90 7e       	andi	r25, 0xE0	; 224
  bc:	89 2b       	or	r24, r25
  be:	82 2b       	or	r24, r18
  c0:	8c 93       	st	X, r24
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <read_ADC>:
  ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ce:	84 ff       	sbrs	r24, 4
  d0:	fc cf       	rjmp	.-8      	; 0xca <read_ADC>
  d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  da:	08 95       	ret

000000dc <PORT_INIT>:

void PORT_INIT()
{
	DDRD = 0xFF;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	8a b9       	out	0x0a, r24	; 10
  e0:	08 95       	ret

000000e2 <main>:
int main(void)
{
	int value;
	uint8_t on_off;
	
	ADC_INIT(0);
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_INIT>
	PORT_INIT();
  e8:	0e 94 6e 00 	call	0xdc	; 0xdc <PORT_INIT>

    while (1) 
    {
		value = read_ADC() >> 7;
  ec:	0e 94 65 00 	call	0xca	; 0xca <read_ADC>
  f0:	88 0f       	add	r24, r24
  f2:	89 2f       	mov	r24, r25
  f4:	88 1f       	adc	r24, r24
  f6:	99 0b       	sbc	r25, r25

		on_off = 0;

		if (value == 0) 
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	21 f0       	breq	.+8      	; 0x104 <main+0x22>
		{
			on_off |= (0x01 << 0);
		}
		else if (value == 7) 
  fc:	07 97       	sbiw	r24, 0x07	; 7
  fe:	21 f0       	breq	.+8      	; 0x108 <main+0x26>

    while (1) 
    {
		value = read_ADC() >> 7;

		on_off = 0;
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	03 c0       	rjmp	.+6      	; 0x10a <main+0x28>

		if (value == 0) 
		{
			on_off |= (0x01 << 0);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	01 c0       	rjmp	.+2      	; 0x10a <main+0x28>
		}
		else if (value == 7) 
		{
			on_off |= (0x01 << 7);
 108:	80 e8       	ldi	r24, 0x80	; 128
		}

		PORTD = on_off;
 10a:	8b b9       	out	0x0b, r24	; 11
    }
 10c:	ef cf       	rjmp	.-34     	; 0xec <main+0xa>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
