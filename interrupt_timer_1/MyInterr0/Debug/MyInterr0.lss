
MyInterr0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011a  0080011a  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090f  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a6  00000000  00000000  00000d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000400  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b4  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000262  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000208e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
#include "UART.h"

volatile int cnt = 0;

ISR(PCINT2_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	if ((PIND & (1 << PD3)) == 0 || (PIND & (1 << PD4)) == 0 || (PIND & (1 << PD6)) == 0 || (PIND & (1 << PD7)) == 0)
  c8:	4b 9b       	sbis	0x09, 3	; 9
  ca:	06 c0       	rjmp	.+12     	; 0xd8 <__vector_5+0x32>
  cc:	4c 9b       	sbis	0x09, 4	; 9
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__vector_5+0x32>
  d0:	4e 9b       	sbis	0x09, 6	; 9
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__vector_5+0x32>
  d4:	4f 99       	sbic	0x09, 7	; 9
  d6:	25 c0       	rjmp	.+74     	; 0x122 <__vector_5+0x7c>
	{
		cnt++;
  d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  dc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
  e6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		
		if (cnt % 3 == 0)
  ea:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  ee:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 31 01 	call	0x262	; 0x262 <__divmodhi4>
  fa:	89 2b       	or	r24, r25
  fc:	91 f4       	brne	.+36     	; 0x122 <__vector_5+0x7c>
		{
			UART_printString("Current Counter Value: ");
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_printString>
			UART_printNumber(cnt);
 106:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <__data_end>
 10a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <__data_end+0x1>
 10e:	07 2e       	mov	r0, r23
 110:	00 0c       	add	r0, r0
 112:	88 0b       	sbc	r24, r24
 114:	99 0b       	sbc	r25, r25
 116:	0e 94 ee 00 	call	0x1dc	; 0x1dc <UART_printNumber>
			UART_printString("\n");
 11a:	88 e1       	ldi	r24, 0x18	; 24
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_printString>
		}
	}
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <INIT_PORT>:

void INIT_PORT(void)
{
	DDRD = 0x00;
 144:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	08 95       	ret

0000014c <INIT_PCINT2>:
}

void INIT_PCINT2(void)
{
	PCICR |= (1 << PCIE2);
 14c:	e8 e6       	ldi	r30, 0x68	; 104
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	84 60       	ori	r24, 0x04	; 4
 154:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT19) | (1 << PCINT20) | (1 << PCINT22) | (1 << PCINT23);
 156:	ed e6       	ldi	r30, 0x6D	; 109
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 6d       	ori	r24, 0xD8	; 216
 15e:	80 83       	st	Z, r24
	sei();
 160:	78 94       	sei
 162:	08 95       	ret

00000164 <main>:
}

int main(void)
{
	UART_INIT();
 164:	0e 94 b9 00 	call	0x172	; 0x172 <UART_INIT>
	INIT_PORT();
 168:	0e 94 a2 00 	call	0x144	; 0x144 <INIT_PORT>
	INIT_PCINT2();
 16c:	0e 94 a6 00 	call	0x14c	; 0x14c <INIT_PCINT2>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0xc>

00000172 <UART_INIT>:
}

unsigned char UART_receive(void) {
	while ( !(UCSR0A & (1<<RXC0)) );   // 데이터 수신 대기
	return UDR0;
}
 172:	e0 ec       	ldi	r30, 0xC0	; 192
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
 17c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 180:	8f ec       	ldi	r24, 0xCF	; 207
 182:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 186:	e2 ec       	ldi	r30, 0xC2	; 194
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	86 60       	ori	r24, 0x06	; 6
 18e:	80 83       	st	Z, r24
 190:	e1 ec       	ldi	r30, 0xC1	; 193
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 61       	ori	r24, 0x10	; 16
 198:	80 83       	st	Z, r24
 19a:	80 81       	ld	r24, Z
 19c:	88 60       	ori	r24, 0x08	; 8
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <UART_transmit>:

void UART_transmit(unsigned char data) {
	while ( !(UCSR0A & (1<<UDRE0)) );   // 송신 가능 대기
 1a2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a6:	95 ff       	sbrs	r25, 5
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <UART_transmit>
	UDR0 = data;                  // 데이터 전송
 1aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ae:	08 95       	ret

000001b0 <UART_printString>:
}

void UART_printString(char *str) {
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++)
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <UART_printString+0x16>
	UART_transmit(str[i]);
 1c0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_transmit>
	while ( !(UCSR0A & (1<<UDRE0)) );   // 송신 가능 대기
	UDR0 = data;                  // 데이터 전송
}

void UART_printString(char *str) {
	for (int i = 0; str[i]; i++)
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	f8 01       	movw	r30, r16
 1c8:	ec 0f       	add	r30, r28
 1ca:	fd 1f       	adc	r31, r29
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	f7 cf       	rjmp	.-18     	; 0x1c0 <UART_printString+0x10>
	UART_transmit(str[i]);
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <UART_printNumber>:

void UART_printNumber(uint32_t num) {
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	2a 97       	sbiw	r28, 0x0a	; 10
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
	int i;
	char buf[10];
	
	for (i=0;num > 0; ++i) {
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	10 e0       	ldi	r17, 0x00	; 0
 1f8:	14 c0       	rjmp	.+40     	; 0x222 <UART_printNumber+0x46>
		buf[i] = num % 10 + '0';
 1fa:	2a e0       	ldi	r18, 0x0A	; 10
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	0e 94 45 01 	call	0x28a	; 0x28a <__udivmodsi4>
 206:	e1 e0       	ldi	r30, 0x01	; 1
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ec 0f       	add	r30, r28
 20c:	fd 1f       	adc	r31, r29
 20e:	e0 0f       	add	r30, r16
 210:	f1 1f       	adc	r31, r17
 212:	60 5d       	subi	r22, 0xD0	; 208
 214:	60 83       	st	Z, r22
		num /= 10;
 216:	62 2f       	mov	r22, r18
 218:	73 2f       	mov	r23, r19
 21a:	84 2f       	mov	r24, r20
 21c:	95 2f       	mov	r25, r21

void UART_printNumber(uint32_t num) {
	int i;
	char buf[10];
	
	for (i=0;num > 0; ++i) {
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	1f 4f       	sbci	r17, 0xFF	; 255
 222:	61 15       	cp	r22, r1
 224:	71 05       	cpc	r23, r1
 226:	81 05       	cpc	r24, r1
 228:	91 05       	cpc	r25, r1
 22a:	39 f7       	brne	.-50     	; 0x1fa <UART_printNumber+0x1e>
		buf[i] = num % 10 + '0';
		num /= 10;
	}
	
	for (int j = i - 1; j >=0; --j)
 22c:	01 50       	subi	r16, 0x01	; 1
 22e:	11 09       	sbc	r17, r1
 230:	0b c0       	rjmp	.+22     	; 0x248 <UART_printNumber+0x6c>
	UART_transmit(buf[j]);
 232:	e1 e0       	ldi	r30, 0x01	; 1
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ec 0f       	add	r30, r28
 238:	fd 1f       	adc	r31, r29
 23a:	e0 0f       	add	r30, r16
 23c:	f1 1f       	adc	r31, r17
 23e:	80 81       	ld	r24, Z
 240:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_transmit>
	for (i=0;num > 0; ++i) {
		buf[i] = num % 10 + '0';
		num /= 10;
	}
	
	for (int j = i - 1; j >=0; --j)
 244:	01 50       	subi	r16, 0x01	; 1
 246:	11 09       	sbc	r17, r1
 248:	11 23       	and	r17, r17
 24a:	9c f7       	brge	.-26     	; 0x232 <UART_printNumber+0x56>
	UART_transmit(buf[j]);
 24c:	2a 96       	adiw	r28, 0x0a	; 10
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <__divmodhi4>:
 262:	97 fb       	bst	r25, 7
 264:	07 2e       	mov	r0, r23
 266:	16 f4       	brtc	.+4      	; 0x26c <__divmodhi4+0xa>
 268:	00 94       	com	r0
 26a:	07 d0       	rcall	.+14     	; 0x27a <__divmodhi4_neg1>
 26c:	77 fd       	sbrc	r23, 7
 26e:	09 d0       	rcall	.+18     	; 0x282 <__divmodhi4_neg2>
 270:	0e 94 67 01 	call	0x2ce	; 0x2ce <__udivmodhi4>
 274:	07 fc       	sbrc	r0, 7
 276:	05 d0       	rcall	.+10     	; 0x282 <__divmodhi4_neg2>
 278:	3e f4       	brtc	.+14     	; 0x288 <__divmodhi4_exit>

0000027a <__divmodhi4_neg1>:
 27a:	90 95       	com	r25
 27c:	81 95       	neg	r24
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	08 95       	ret

00000282 <__divmodhi4_neg2>:
 282:	70 95       	com	r23
 284:	61 95       	neg	r22
 286:	7f 4f       	sbci	r23, 0xFF	; 255

00000288 <__divmodhi4_exit>:
 288:	08 95       	ret

0000028a <__udivmodsi4>:
 28a:	a1 e2       	ldi	r26, 0x21	; 33
 28c:	1a 2e       	mov	r1, r26
 28e:	aa 1b       	sub	r26, r26
 290:	bb 1b       	sub	r27, r27
 292:	fd 01       	movw	r30, r26
 294:	0d c0       	rjmp	.+26     	; 0x2b0 <__udivmodsi4_ep>

00000296 <__udivmodsi4_loop>:
 296:	aa 1f       	adc	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	ee 1f       	adc	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	a2 17       	cp	r26, r18
 2a0:	b3 07       	cpc	r27, r19
 2a2:	e4 07       	cpc	r30, r20
 2a4:	f5 07       	cpc	r31, r21
 2a6:	20 f0       	brcs	.+8      	; 0x2b0 <__udivmodsi4_ep>
 2a8:	a2 1b       	sub	r26, r18
 2aa:	b3 0b       	sbc	r27, r19
 2ac:	e4 0b       	sbc	r30, r20
 2ae:	f5 0b       	sbc	r31, r21

000002b0 <__udivmodsi4_ep>:
 2b0:	66 1f       	adc	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	88 1f       	adc	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	1a 94       	dec	r1
 2ba:	69 f7       	brne	.-38     	; 0x296 <__udivmodsi4_loop>
 2bc:	60 95       	com	r22
 2be:	70 95       	com	r23
 2c0:	80 95       	com	r24
 2c2:	90 95       	com	r25
 2c4:	9b 01       	movw	r18, r22
 2c6:	ac 01       	movw	r20, r24
 2c8:	bd 01       	movw	r22, r26
 2ca:	cf 01       	movw	r24, r30
 2cc:	08 95       	ret

000002ce <__udivmodhi4>:
 2ce:	aa 1b       	sub	r26, r26
 2d0:	bb 1b       	sub	r27, r27
 2d2:	51 e1       	ldi	r21, 0x11	; 17
 2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <__udivmodhi4_ep>

000002d6 <__udivmodhi4_loop>:
 2d6:	aa 1f       	adc	r26, r26
 2d8:	bb 1f       	adc	r27, r27
 2da:	a6 17       	cp	r26, r22
 2dc:	b7 07       	cpc	r27, r23
 2de:	10 f0       	brcs	.+4      	; 0x2e4 <__udivmodhi4_ep>
 2e0:	a6 1b       	sub	r26, r22
 2e2:	b7 0b       	sbc	r27, r23

000002e4 <__udivmodhi4_ep>:
 2e4:	88 1f       	adc	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	5a 95       	dec	r21
 2ea:	a9 f7       	brne	.-22     	; 0x2d6 <__udivmodhi4_loop>
 2ec:	80 95       	com	r24
 2ee:	90 95       	com	r25
 2f0:	bc 01       	movw	r22, r24
 2f2:	cd 01       	movw	r24, r26
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
