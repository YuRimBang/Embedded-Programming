
MyNewBTN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c8  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000850  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044a  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024b  00000000  00000000  00001e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <INIT_PORT>:
#define bit_is_clear
#include "UART.h"

void INIT_PORT(void)
{
	DDRB = 0x00;
  80:	14 b8       	out	0x04, r1	; 4
  82:	08 95       	ret

00000084 <button_pressed>:
}

unsigned char button_pressed(void)
{
	if(bit_is_clear(PIND, PIND2))
  84:	89 b1       	in	r24, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	8f e3       	ldi	r24, 0x3F	; 63
  88:	9c e9       	ldi	r25, 0x9C	; 156
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <button_pressed+0x6>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <button_pressed+0xc>
  90:	00 00       	nop
	{
		_delay_ms(10);
		if(bit_is_clear(PIND, PIND2))
  92:	89 b1       	in	r24, 0x09	; 9
		{
			return 1;
		}
		return 0;
	}
}
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	08 95       	ret

00000098 <main>:

int main(void) 
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x6>
  9e:	00 d0       	rcall	.+0      	; 0xa0 <main+0x8>
  a0:	00 d0       	rcall	.+0      	; 0xa2 <main+0xa>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	UART_INIT();
  a6:	0e 94 97 00 	call	0x12e	; 0x12e <UART_INIT>
	INIT_PORT();
  aa:	0e 94 40 00 	call	0x80	; 0x80 <INIT_PORT>
	
	char state [6];

	state[4] = '\n';
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	8d 83       	std	Y+5, r24	; 0x05
	state[5] = '\0';
  b2:	1e 82       	std	Y+6, r1	; 0x06
	
	while(1)  {
		button_pressed();
  b4:	0e 94 42 00 	call	0x84	; 0x84 <button_pressed>
		for (int i=0; i<4; i++) 
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	27 c0       	rjmp	.+78     	; 0x10c <main+0x74>
		{
			if(PINB & (0x02 << i))
  be:	43 b1       	in	r20, 0x03	; 3
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9c 01       	movw	r18, r24
  c6:	00 2e       	mov	r0, r16
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x36>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <main+0x32>
  d2:	84 2f       	mov	r24, r20
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	82 23       	and	r24, r18
  d8:	93 23       	and	r25, r19
  da:	89 2b       	or	r24, r25
  dc:	69 f0       	breq	.+26     	; 0xf8 <main+0x60>
			{
				UART_printString('*');
  de:	8a e2       	ldi	r24, 0x2A	; 42
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_printString>
				state[i] = 'o';
  e6:	e1 e0       	ldi	r30, 0x01	; 1
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ec 0f       	add	r30, r28
  ec:	fd 1f       	adc	r31, r29
  ee:	e0 0f       	add	r30, r16
  f0:	f1 1f       	adc	r31, r17
  f2:	8f e6       	ldi	r24, 0x6F	; 111
  f4:	80 83       	st	Z, r24
  f6:	08 c0       	rjmp	.+16     	; 0x108 <main+0x70>
			}
			else
			state[i] = 'x';
  f8:	e1 e0       	ldi	r30, 0x01	; 1
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	ec 0f       	add	r30, r28
  fe:	fd 1f       	adc	r31, r29
 100:	e0 0f       	add	r30, r16
 102:	f1 1f       	adc	r31, r17
 104:	88 e7       	ldi	r24, 0x78	; 120
 106:	80 83       	st	Z, r24
	state[4] = '\n';
	state[5] = '\0';
	
	while(1)  {
		button_pressed();
		for (int i=0; i<4; i++) 
 108:	0f 5f       	subi	r16, 0xFF	; 255
 10a:	1f 4f       	sbci	r17, 0xFF	; 255
 10c:	04 30       	cpi	r16, 0x04	; 4
 10e:	11 05       	cpc	r17, r1
 110:	b4 f2       	brlt	.-84     	; 0xbe <main+0x26>
			}
			else
			state[i] = 'x';
			
		}
		UART_printString(state);
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_printString>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	87 ea       	ldi	r24, 0xA7	; 167
 11e:	91 e6       	ldi	r25, 0x61	; 97
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x88>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x92>
 12a:	00 00       	nop
 12c:	c3 cf       	rjmp	.-122    	; 0xb4 <main+0x1c>

0000012e <UART_INIT>:
}

unsigned char UART_receive(void) {
	while ( !(UCSR0A & (1<<RXC0)) );   // 데이터 수신 대기
	return UDR0;
}
 12e:	e0 ec       	ldi	r30, 0xC0	; 192
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
 138:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 13c:	8f ec       	ldi	r24, 0xCF	; 207
 13e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 142:	e2 ec       	ldi	r30, 0xC2	; 194
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	86 60       	ori	r24, 0x06	; 6
 14a:	80 83       	st	Z, r24
 14c:	e1 ec       	ldi	r30, 0xC1	; 193
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 61       	ori	r24, 0x10	; 16
 154:	80 83       	st	Z, r24
 156:	80 81       	ld	r24, Z
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <UART_transmit>:

void UART_transmit(unsigned char data) {
	while ( !(UCSR0A & (1<<UDRE0)) );   // 송신 가능 대기
 15e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 162:	95 ff       	sbrs	r25, 5
 164:	fc cf       	rjmp	.-8      	; 0x15e <UART_transmit>
	UDR0 = data;                  // 데이터 전송
 166:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 16a:	08 95       	ret

0000016c <UART_printString>:
}

void UART_printString(char *str) {
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++)
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	03 c0       	rjmp	.+6      	; 0x182 <UART_printString+0x16>
	UART_transmit(str[i]);
 17c:	0e 94 af 00 	call	0x15e	; 0x15e <UART_transmit>
	while ( !(UCSR0A & (1<<UDRE0)) );   // 송신 가능 대기
	UDR0 = data;                  // 데이터 전송
}

void UART_printString(char *str) {
	for (int i = 0; str[i]; i++)
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	f8 01       	movw	r30, r16
 184:	ec 0f       	add	r30, r28
 186:	fd 1f       	adc	r31, r29
 188:	80 81       	ld	r24, Z
 18a:	81 11       	cpse	r24, r1
 18c:	f7 cf       	rjmp	.-18     	; 0x17c <UART_printString+0x10>
	UART_transmit(str[i]);
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
