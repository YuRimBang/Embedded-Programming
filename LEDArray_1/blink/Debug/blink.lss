
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000140  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079f  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  000009eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017e  00000000  00000000  000016ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001829  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	28 97       	sbiw	r28, 0x08	; 8
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8a b9       	out	0x0a, r24	; 10

	char patterns[] = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	e0 e0       	ldi	r30, 0x00	; 0
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x22>
	while(1)
	{
		for(int i = 0; i < 8; i++)
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	37 c0       	rjmp	.+110    	; 0x134 <main+0x9e>
		{
			 int a = i, b = (i + 1) % 8, c = (i + 2) % 8;
  c6:	a9 01       	movw	r20, r18
  c8:	4f 5f       	subi	r20, 0xFF	; 255
  ca:	5f 4f       	sbci	r21, 0xFF	; 255
  cc:	ca 01       	movw	r24, r20
  ce:	87 70       	andi	r24, 0x07	; 7
  d0:	90 78       	andi	r25, 0x80	; 128
  d2:	99 23       	and	r25, r25
  d4:	24 f4       	brge	.+8      	; 0xde <main+0x48>
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	88 6f       	ori	r24, 0xF8	; 248
  da:	9f 6f       	ori	r25, 0xFF	; 255
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	fc 01       	movw	r30, r24
  e0:	c9 01       	movw	r24, r18
  e2:	02 96       	adiw	r24, 0x02	; 2
  e4:	87 70       	andi	r24, 0x07	; 7
  e6:	90 78       	andi	r25, 0x80	; 128
  e8:	99 23       	and	r25, r25
  ea:	24 f4       	brge	.+8      	; 0xf4 <main+0x5e>
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	88 6f       	ori	r24, 0xF8	; 248
  f0:	9f 6f       	ori	r25, 0xFF	; 255
  f2:	01 96       	adiw	r24, 0x01	; 1
			
			char p1 = patterns[a];
  f4:	a1 e0       	ldi	r26, 0x01	; 1
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	ac 0f       	add	r26, r28
  fa:	bd 1f       	adc	r27, r29
  fc:	a2 0f       	add	r26, r18
  fe:	b3 1f       	adc	r27, r19
 100:	3c 91       	ld	r19, X
			char p2 = patterns[b];
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	6c 0f       	add	r22, r28
 108:	7d 1f       	adc	r23, r29
 10a:	e6 0f       	add	r30, r22
 10c:	f7 1f       	adc	r31, r23
 10e:	20 81       	ld	r18, Z
			char p3 = patterns[c];
 110:	fb 01       	movw	r30, r22
 112:	e8 0f       	add	r30, r24
 114:	f9 1f       	adc	r31, r25
 116:	90 81       	ld	r25, Z
			
			 PORTD = p1 | p2 | p3; 
 118:	83 2f       	mov	r24, r19
 11a:	82 2b       	or	r24, r18
 11c:	89 2b       	or	r24, r25
 11e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	7f ef       	ldi	r23, 0xFF	; 255
 122:	83 ed       	ldi	r24, 0xD3	; 211
 124:	90 e3       	ldi	r25, 0x30	; 48
 126:	71 50       	subi	r23, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x90>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x9a>
 130:	00 00       	nop
	DDRD = 0xFF;

	char patterns[] = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
	while(1)
	{
		for(int i = 0; i < 8; i++)
 132:	9a 01       	movw	r18, r20
 134:	28 30       	cpi	r18, 0x08	; 8
 136:	31 05       	cpc	r19, r1
 138:	34 f2       	brlt	.-116    	; 0xc6 <main+0x30>
 13a:	c2 cf       	rjmp	.-124    	; 0xc0 <main+0x2a>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
